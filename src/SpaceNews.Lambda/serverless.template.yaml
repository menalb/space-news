AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: An AWS Lambda Function that scape the news feeds and update the database
Resources:
  SpaceNewsUpdaterStateMachine:
    Type: AWS::Serverless::StateMachine
    DependsOn:
        - StatesExecutionRole
        - StateMachineLogGroup
    Properties:
      Events:
        InvocationLevel:
          Type: Schedule
          Properties: 
            Schedule: cron(0 5/10 * * ? *)
      Definition:
        {
          "Comment": "A description of my state machine",
          "StartAt": "Scraper_Function",
          "States": {
            "Scraper_Function": {
              "Type": "Task",
              "Resource": "${ScraperFunctionARN}",
              "Parameters": {
                "Payload.$": "$"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "Next": "Summary_Function"
              },
              "Summary_Function": {
                "Type": "Task",
                "Resource": "${SummaryFunctionARN}",
                "Retry": [
                  {
                    "ErrorEquals": [
                      "Lambda.ServiceException",
                      "Lambda.AWSLambdaException",
                      "Lambda.SdkClientException"
                    ],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 3,
                    "BackoffRate": 2
                  }
                ],
                "End": true
              }
           }
        }
      DefinitionSubstitutions:
        ScraperFunctionARN: !GetAtt ScraperFunction.Arn
        SummaryFunctionARN: !GetAtt SummaryFunction.Arn
      Role:
        Fn::GetAtt: [ StatesExecutionRole, Arn ]
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StateMachineLogGroup.Arn
        IncludeExecutionData: true
        Level: 'ALL'

  StateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join [ "/", [ "stepfunctions", SpaceNewsUpdaterStateMachine]]

  ScraperFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: "SpaceNews.Lambda::SpaceNews.Lambda.ScraperFunction::FunctionHandler"
      Runtime: dotnet8
      CodeUri: ''
      MemorySize: 512
      Timeout: 120
      Policies:
        - AWSLambda_FullAccess
      Environment:
        Variables:
          DB_CONNECTION_STRING: "{{resolve:ssm:/SpaceNews/DatabaseConnectionString}}"
          YOUTUBE_API_KEY: "{{resolve:ssm:/SpaceNews/YouTubeAPIKey}}"
  
  SummaryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: "SpaceNews.Lambda::SpaceNews.Lambda.SummaryFunction::FunctionHandler"
      Runtime: dotnet8
      CodeUri: ''
      MemorySize: 512
      Timeout: 60
      Policies:
        - AWSLambda_FullAccess
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: 
                - "bedrock:InvokeModel"
              Resource:
                - arn:aws:bedrock:us-east-1::foundation-model/*
      Environment:
        Variables:
          DB_CONNECTION_STRING: "{{resolve:ssm:/SpaceNews/DatabaseConnectionString}}"
          MODEL_ID: "{{resolve:ssm:/SpaceNews/ModelId}}"
          API_KEY: "{{resolve:ssm:/SpaceNews/ApiKey}}"

  StatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: LambdaExecute
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: 
                  - !GetAtt ScraperFunction.Arn
                  - !GetAtt SummaryFunction.Arn
        -  PolicyName: LogPermissions
           PolicyDocument:
             Version: "2012-10-17"
             Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogDelivery"
                  - "logs:GetLogDelivery"
                  - "logs:UpdateLogDelivery"
                  - "logs:DeleteLogDelivery"
                  - "logs:ListLogDeliveries"
                  - "logs:PutLogEvents"
                  - "logs:PutResourcePolicy"
                  - "logs:DescribeResourcePolicies"
                  - "logs:DescribeLogGroups"
                Resource: "*"                